<?php
namespace tjsd\collections\iterators;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-03 at 22:35:01.
 */
class InfiniteIteratorIteratorTest extends \PHPUnit_Framework_TestCase {
    protected $emptyIterator;
    protected $fooBarIterator;
    
    public function setUp() {
	$this->emptyIterator = new InfiniteIteratorIterator(new ArrayIterator(array()));
	$this->fooBarIterator = new InfiniteIteratorIterator(new ArrayIterator(array('foo', 'bar')));
    }


    public function testCurrentOnEmptyIteratorThrowsException() {
	$this->setExpectedException(
	    '\tjsd\collections\exceptions\EndOfIteratorException', 'Iterator reaches its end. Rewind interator.'
	);
        $this->emptyIterator->current();
    }
    
    public function testCurrentOnNotEmptyIteratorReturnsCurrentElement() {
        $this->assertSame('foo', $this->fooBarIterator->current());
    }
    
    public function testKeyOnEmptyIteratorThrowsException() {
	$this->setExpectedException(
	    '\tjsd\collections\exceptions\EndOfIteratorException', 'Iterator reaches its end. Rewind interator.'
	);
        $this->emptyIterator->key();
    }

    public function testKeyOnNotEmptyItertorReturnsCurrentKey() {
        $this->assertSame(0, $this->fooBarIterator->key());
    }
    
    public function testNextOnEmptyIteratorThrowException() {
	$this->setExpectedException(
	    '\tjsd\collections\exceptions\EndOfIteratorException', 'Iterator reaches its end. Rewind interator.'
	);
        $this->emptyIterator->next();
    }

    public function testNextOnNotEmptyIteratorMovesIteratorToNextElement() {
	$this->assertSame('foo', $this->fooBarIterator->current());
	$this->fooBarIterator->next();
        $this->assertSame('bar', $this->fooBarIterator->current());
        
    }

    public function testRewindRestartsIteratorToBeginning() {
        $this->assertSame('foo', $this->fooBarIterator->current());
        $this->fooBarIterator->next();
        $this->fooBarIterator->rewind();
        $this->assertSame('foo', $this->fooBarIterator->current());
    }

    public function testValidOnEmptyIteratorReturnsFalse() {
        $this->assertFalse($this->emptyIterator->valid());
    }

    public function testValidOnNewNotEmptyIteratorReturnsTrue() {
        $this->assertTrue($this->fooBarIterator->valid());
    }
    
    public function testInfiniteIteration() {
        $iterationsLimit = 10;
	$expectedResult = array('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar');
	$result = array();
	foreach($this->fooBarIterator as $value) {
	    if ($iterationsLimit-- === 0) {
		break;
	    }
	    $result[] = $value;
	}
	
	$this->assertSame($expectedResult, $result);
    }
}
